require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe GoalsController do
#  include Devise::TestHelpers

  render_views

  # This should return the minimal set of attributes required to create a valid
  # Goal. As you add validations to Goal, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :title       => "Title",
      :description => "description...",
      :starts_at   => DateTime.civil(2012, 9, 1),
      :ends_at     => DateTime.civil(2013, 9, 1),
      :period      => "1 month"
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GoalsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do

    before :each do
      @user = Factory.create(:user)
      sign_in @user

      3.times {Factory.create(:goal)}
      @goals = Goal.all
      @goals.second.title = "followed"
      @goals.last.title = "unfollowed"
      @goals.second.save!
      @goals.last.save!

      @user.follow_goal(@goals.second)

      @followed_goals = @user.followed_goals
      @unfollowed_goals = @goals - @followed_goals

      get :index, {}#
    end

    describe "assigns" do
      it "all goals as @goals" do
        assigns(:goals).should eq(@goals)
      end

      it "followed goals as @followed_goals" do
        assigns(:followed_goals).should eq(@followed_goals)
      end
      
      it "unfollowed goals as @unfollowed_goals" do
        assigns(:unfollowed_goals).should eq(@unfollowed_goals)
      end
    end

    describe "shows" do
      it "a list of all goals" do
        response.should have_selector 'h3', :content => "All Goals"
        response.should have_selector ".all_goals .goal", :content => @goals.first.title
      end
      
      it "a list of followed goals" do
        response.should have_selector 'h3', :content => "Followed Goals"
        response.should have_selector ".followed_goals .goal", :content => @followed_goals.first.title
      end
      
      it "a list of unfollowed goals" do
        response.should have_selector 'h3', :content => "Other Goals"
        response.should have_selector ".unfollowed_goals .goal", :content => @unfollowed_goals.first.title
      end
    end
  end

  describe "GET show" do
    before :each do
      @goal = Factory(:goal)
      @post1 = Factory.create(:post)
      @post2 = Factory.create(:post, :content => "i am post 2")
      @goal.posts << @post1
      @goal.posts << @post2
      @goal.posts.count.should eq 2
      sign_in @user = Factory.create(:user)
    end
    
    describe "if user is following" do
      before :each do
        @user.follow_goal(@goal)
        @account = @user.accounts.find_by_goal_id(@goal)
        get :show, {:id => @goal.to_param}
      end
      
      it "assigns the user account" do
        assigns(:account).should eq @account
      end
      
      describe "shows" do
        it "a button to unfollow the goal" do
          response.should have_selector 'form', :method => "post", :action => goal_account_path(@goal, @account), :class => "button_to"
        end      
        
        it "a link to this user's account" do
          response.should have_selector 'a', :href => goal_account_path(@goal, @account), :content => 'Account'
        end
      end
    end
    
    describe "if the user is not following" do
      before :each do
        get :show, {:id => @goal.to_param}
      end
      
      describe "shows" do
        it "a link to follow the goal" do
          response.should have_selector 'a', :href => new_goal_account_path(@goal), :content => "Follow This Goal"
        end
      
        it "a link to create a new account" do
          response.should have_selector 'a', :href => new_goal_account_path(@goal), :content => 'Account'
        end
      end
    end
    
    describe "" do
      before :each do
        get :show, {:id => @goal.to_param}
      end
      
      describe "shows" do
        it "all child posts" do
          response.should have_selector ".feed"
          response.should have_selector ".feed .post"
          response.should have_selector 'h3', :content => @post1.title
          response.should have_selector '.feed .post .content', :content => @post1.content
          response.should have_selector 'h3', :content => @post2.title
          response.should have_selector '.feed .post .content', :content => @post2.content
        end
        
        it "assigns the right stuff" do
          assigns(:goal).should eq(@goal)
          assigns(:posts).should eq @goal.posts
        end

        it "only its posts" do
          not_my_post = Factory.create(:post, :content => "not mine.")
          response.should_not have_selector '.feed .post .content', :content => not_my_post.content
        end

        it "a link to support this goal" do
          response.should have_selector 'a', :content => "Support This Goal"
        end
      end
    end
  end

  describe "GET new" do
    before :each do
      @goal = Goal.new 
      get :new, {}
    end

    it "assigns a new goal as @goal" do
      assigns(:goal).should be_a_new(Goal)
    end

    it "displays blog form fields" do
      response.should have_selector ".blog_url"
      response.should have_selector ".blog_service_provider"
    end

  end

  describe "GET edit" do
    before :each do
      @goal = Factory.create(:goal)
      get :edit, {:id => @goal.to_param}
    end

    it "assigns the requested goal as @goal" do
      assigns(:goal).should eq(@goal)
    end

    it "displays blog form fields filled with existing values" do
      response.should have_selector "input", {:id => 'goal_blog_url', :value => @goal.blog_url }
      response.should have_selector "select", {:id => "goal_blog_service_provider"}
      response.should have_selector "option", {:value => @goal.blog_service_provider, :selected => "selected"}
    end

  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Goal" do
        expect {
          post :create, {:goal => valid_attributes}
        }.to change(Goal, :count).by(1)
      end

      it "assigns a newly created goal as @goal" do
        post :create, {:goal => valid_attributes}
        assigns(:goal).should be_a(Goal)
        assigns(:goal).should be_persisted
      end

      it "redirects to the created goal" do
        post :create, {:goal => valid_attributes}
        response.should redirect_to(Goal.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved goal as @goal" do
        # Trigger the behavior that occurs when invalid params are submitted
        Goal.any_instance.stub(:save).and_return(false)
        post :create, {:goal => {}}
        assigns(:goal).should be_a_new(Goal)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Goal.any_instance.stub(:save).and_return(false)
        post :create, {:goal => {}}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested goal" do
        goal = Goal.create! valid_attributes
        # Assuming there are no other goals in the database, this
        # specifies that the Goal created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Goal.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => goal.to_param, :goal => {'these' => 'params'}}
      end

      it "assigns the requested goal as @goal" do
        goal = Goal.create! valid_attributes
        put :update, {:id => goal.to_param, :goal => valid_attributes}
        assigns(:goal).should eq(goal)
      end

      it "redirects to the goal" do
        goal = Goal.create! valid_attributes
        put :update, {:id => goal.to_param, :goal => valid_attributes}
        response.should redirect_to(goal)
      end

      it "updates feed if blog_url changes" do
        goal = Factory.create(:goal)
        goal.update_from_feed
        posts = goal.posts.all
        put :update, {:id => goal.to_param, :goal => {:blog_url => 'http://dunkbonds.blogspot.com/feeds/posts/default'} }
        goal.posts.reload
        assert !goal.posts.include?(posts)
        posts.should_not eq(goal.posts.all)
      end
    end

    describe "with invalid params" do
      it "assigns the goal as @goal" do
        goal = Goal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Goal.any_instance.stub(:save).and_return(false)
        put :update, {:id => goal.to_param, :goal => {}}
        assigns(:goal).should eq(goal)
      end

      it "re-renders the 'edit' template" do
        goal = Goal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Goal.any_instance.stub(:save).and_return(false)
        put :update, {:id => goal.to_param, :goal => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested goal" do
      goal = Goal.create! valid_attributes
      expect {
        delete :destroy, {:id => goal.to_param}
      }.to change(Goal, :count).by(-1)
    end

    it "redirects to the goals list" do
      goal = Goal.create! valid_attributes
      delete :destroy, {:id => goal.to_param}
      response.should redirect_to(goals_url)
    end
  end

end
