require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CartsController do
  render_views

  # This should return the minimal set of attributes required to create a valid
  # Cart. As you add validations to Cart, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CartsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET show" do
    before :each do
      @user = Factory.create(:user)
      @goal = Factory.create(:goal)
      @user.follow_goal @goal
      @account = @user.accounts.last
      @goal2 = Factory.create(:goal)
      @user.follow_goal @goal2
      @account2 = @user.accounts.last
      @cart = subject.send(:current_cart)
    end

    it "assigns the requested cart as @cart" do
      get :show, {:id => @cart.to_param}, {:cart_id => @cart.id}
      assigns(:cart).should eq(@cart)
    end

    it "assigns the requested cart's line items as @line_items" do
      get :show, {:id => @cart.to_param}, {:cart_id => @cart.id}
      @line_items = @cart.line_items
      assigns(:line_items).should eq(@line_items)
    end

    it "squawks if any account's total ask qty exceed that account's sellable bond qty" do
      pending "moved this check to the line item validation"
      @account.bonds.create!(:debtor => @goal.treasury, :qty => 2)
      @account2.bonds.create!(:debtor => @goal2.treasury, :qty => 5)
      @account.line_items.create!(:type_of => "bond ask", 
                                  :qty => 1,
                                  :max_bid_min_ask => 3,
                                  :cart_id => @cart.id)
      get :show, {:id => @cart.to_param}, {:cart_id => @cart.id}
      response.should_not have_selector "#flash_error", :content =>  "You don't have enough sellable bonds to cover these sell requests.  \n Edit sell requests so that you don't try to sell more bonds than you own before creating your order."
   
      @account.line_items.create!(:type_of => "bond ask", 
                                  :qty => 2,
                                  :max_bid_min_ask => 3,
                                  :cart_id => @cart.id)
      get :show, {:id => @cart.to_param}, {:cart_id => @cart.id}
      response.should have_selector "#flash_error", :content =>  "You don't have enough sellable bonds to cover these sell requests.  \n Edit sell requests so that you don't try to sell more bonds than you own before creating your order."
   
      @account2.line_items.create!(:type_of => "bond ask", 
                                   :qty => 3,
                                   :max_bid_min_ask => 3,
                                   :cart_id => @cart.id)      
      @account2.line_items.create!(:type_of => "bond ask", 
                                   :qty => 3,
                                   :max_bid_min_ask => 3,
                                   :cart_id => @cart.id)  
      get :show, {:id => @cart.to_param}, {:cart_id => @cart.id}
      response.should have_selector "#flash_error", :content =>  "You don't have enough sellable bonds to cover these sell requests.  \n Edit sell requests so that you don't try to sell more bonds than you own before creating your order."
    end
  end

end
